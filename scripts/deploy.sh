#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function log() {
  echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

function success() {
  echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

function error() {
  echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

function check_error() {
  if [ $? -ne 0 ]; then
    error "‚ùå $1"
    exit 1
  fi
}

ROOT_DIR=$(pwd)
MODE=${1:-dev}
ENV_FILE="$ROOT_DIR/docker/.env"

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤ —Ä–µ–∂–∏–º–µ: $MODE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker –∏ Docker Compose
if ! command -v docker &> /dev/null; then
  error "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  exit 1
fi

if ! command -v docker-compose &> /dev/null; then
  error "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if [ ! -f "$ENV_FILE" ]; then
  log "üìÑ –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ .env.sample"
  cp "$ROOT_DIR/docker/.env.sample" "$ENV_FILE"
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env"
  success "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ docker-compose
if [ "$MODE" == "prod" ]; then
  COMPOSE_FILE="$ROOT_DIR/docker/docker-compose.prod.yml"

  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
  source $ENV_FILE

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–∞
  DOMAIN=${DOMAIN:-"example.com"}
  if [[ "$DOMAIN" == "example.com" || -z "$DOMAIN" ]]; then
    error "‚ö†Ô∏è –í .env —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–æ–º–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ DOMAIN –∏ CERTBOT_EMAIL"
    exit 1
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  if [ ! -d "$ROOT_DIR/docker/certbot/conf/live/$DOMAIN" ]; then
    log "üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ $DOMAIN"
    log "üîí –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ CERTBOT_EMAIL
    if [[ -z "$CERTBOT_EMAIL" ]]; then
      error "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω CERTBOT_EMAIL –≤ .env —Ñ–∞–π–ª–µ"
      exit 1
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
    bash "$ROOT_DIR/scripts/setup-ssl.sh" "$DOMAIN" "$CERTBOT_EMAIL"
    check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
  fi

  # –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

  # 1. –ü–æ–¥–Ω–∏–º–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (DB, Redis, MinIO)
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (DB, Redis, MinIO)..."
  docker-compose -f "$COMPOSE_FILE" up -d db redis minio
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"

  # –ñ–¥–µ–º, –ø–æ–∫–∞ –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã
  log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
  sleep 10

  # 2. –ü–æ–¥–Ω–∏–º–∞–µ–º –±—ç–∫–µ–Ω–¥
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫–µ–Ω–¥ –∏ worker..."
  docker-compose -f "$COMPOSE_FILE" up -d backend celery_worker
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥"

  # –ñ–¥–µ–º, –ø–æ–∫–∞ –±—ç–∫–µ–Ω–¥ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
  log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞..."
  sleep 10

  # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∫ –±—ç–∫–µ–Ω–¥—É
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∫ –±—ç–∫–µ–Ω–¥—É..."

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å Docker
  DOCKER_NETWORK=$(docker network ls --filter "name=avitorentpro" --format "{{.Name}}" | head -n 1)
  log "‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Ç—å Docker: $DOCKER_NETWORK"

  # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±—ç–∫–µ–Ω–¥–∞
  BACKEND_CONTAINER=$(docker ps --filter "name=backend" --format "{{.Names}}" | head -n 1)
  log "‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—ç–∫–µ–Ω–¥–∞: $BACKEND_CONTAINER"

  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É $BACKEND_CONTAINER –≤ —Å–µ—Ç–∏ $DOCKER_NETWORK"
  PROXY_ID=$(docker run -d --network $DOCKER_NETWORK --name temp-proxy-for-build nginx:alpine)

  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –±—ç–∫–µ–Ω–¥
  docker exec $PROXY_ID sh -c "echo 'server { listen 80; location /api/ { proxy_pass http://$BACKEND_CONTAINER:8000/api/; }}' > /etc/nginx/conf.d/default.conf && nginx -s reload"

  log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏..."
  sleep 1

  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API..."
  if docker exec $PROXY_ID curl -s http://localhost/api/api/v1/apartments?page_size=1 > /dev/null; then
    log "‚úÖ API —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"
  else
    log "‚ö†Ô∏è API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å"
    if docker exec $PROXY_ID curl -s http://$BACKEND_CONTAINER:8000/api/api/v1/apartments?page_size=1 > /dev/null; then
      log "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é"
    else
      log "‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
  fi

  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sitemap
  log "üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sitemap..."
  SITEMAP_DATA_DIR="/var/www/avitorentpro/apps/frontend/public"
  mkdir -p $SITEMAP_DATA_DIR

  if curl -s http://localhost:8000/api/api/v1/apartments?page_size=1 > /dev/null || docker exec $PROXY_ID curl -s http://$BACKEND_CONTAINER:8000/api/api/v1/apartments?page_size=1 > /dev/null; then
    log "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è sitemap"
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è sitemap
    API_DATA=$(docker exec $PROXY_ID curl -s http://$BACKEND_CONTAINER:8000/api/api/v1/apartments?page_size=40)
    echo "$API_DATA" > $SITEMAP_DATA_DIR/sitemap-data.json
    log "üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è sitemap —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: $SITEMAP_DATA_DIR/sitemap-data.json"
  else
    log "‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sitemap"
    mkdir -p $SITEMAP_DATA_DIR
    echo '{"items":[]}' > $SITEMAP_DATA_DIR/sitemap-data.json
    log "üì¶ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è sitemap"
  fi

  # –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏
  log "üî® –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏
  export BUILD_MODE=static
  export NEXT_PUBLIC_USE_LOCAL_SITEMAP_DATA=true

  # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∫–∏
  if ! docker-compose -f "$COMPOSE_FILE" build frontend; then
    log "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–±–æ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"
    log "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–±–æ—Ä–∫–∞ –±–µ–∑ –ª–∏–Ω—Ç–∏–Ω–≥–∞..."
    docker-compose -f "$COMPOSE_FILE" build frontend --build-arg NEXT_PUBLIC_BUILD_MODE=static --build-arg NEXT_PUBLIC_USE_LOCAL_SITEMAP_DATA=true
    check_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"
  fi

  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏
  log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"
  docker stop $PROXY_ID
  docker rm $PROXY_ID

  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥..."
  docker-compose -f "$COMPOSE_FILE" up -d frontend
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"

  # –ñ–¥–µ–º, –ø–æ–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
  log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
  sleep 10

  # 4. –ó–∞–ø—É—Å–∫–∞–µ–º Nginx –∏ Certbot
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Nginx –∏ Certbot..."
  docker-compose -f "$COMPOSE_FILE" up -d nginx certbot
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Nginx –∏ Certbot"
else
  COMPOSE_FILE="$ROOT_DIR/docker/docker-compose.dev.yml"
  log "üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Ä–µ–∂–∏–º–µ $MODE"
  docker-compose -f "$COMPOSE_FILE" up -d
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
fi

log "üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Alembic..."
if [ -z "$(docker-compose -f "$COMPOSE_FILE" exec -T backend bash -c 'ls /app/versions 2>/dev/null')" ]; then
  log "üõ†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–π –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"
  docker-compose -f "$COMPOSE_FILE" exec -T backend alembic revision --autogenerate -m "Initial migration"
fi

# –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log "üóÉÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
docker-compose -f "$COMPOSE_FILE" exec -T backend alembic -c alembic.ini upgrade head
check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"

# –î–ª—è dev —Ä–µ–∂–∏–º–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
if [ "$MODE" == "dev" ]; then
  log "üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
  APARTMENT_COUNT=$(docker-compose -f "$COMPOSE_FILE" exec -T db psql -U postgres -d avitorentpro -c "SELECT COUNT(*) FROM apartment;" -t 2>/dev/null || echo "0")
  APARTMENT_COUNT=$(echo $APARTMENT_COUNT | tr -d ' ')

  if [[ $APARTMENT_COUNT == "0" || $APARTMENT_COUNT == *"does not exist"* ]]; then
    log "üß™ –ó–∞–ø–æ–ª–Ω—è–µ–º –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
    docker-compose -f "$COMPOSE_FILE" exec -T backend python -m scripts.seed_data
    check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
  else
    success "‚úÖ –í –ë–î —É–∂–µ –µ—Å—Ç—å $APARTMENT_COUNT –∑–∞–ø–∏—Å–µ–π"
  fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

if [ "$MODE" == "prod" ]; then
  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Nginx
  log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Nginx..."
if command -v curl &> /dev/null; then
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ HTTPS)
  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 -m 10 http://$DOMAIN/ || echo "failed")
  if [[ "$HTTP_STATUS" == "301" || "$HTTP_STATUS" == "302" ]]; then
    success "‚úÖ HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ($HTTP_STATUS)"
  else
    log "‚ö†Ô∏è HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: $HTTP_STATUS)"
    # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –æ—à–∏–±–∫–æ–π - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ DNS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ)
  HTTPS_STATUS=$(curl -k -s -o /dev/null -w "%{http_code}" --connect-timeout 5 -m 10 https://$DOMAIN/ || echo "failed")
  if [[ "$HTTPS_STATUS" == "200" ]]; then
    success "‚úÖ HTTPS –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
  else
    log "‚ö†Ô∏è HTTPS –¥–æ—Å—Ç—É–ø –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É DNS –¥–ª—è –¥–æ–º–µ–Ω–∞ $DOMAIN"
    log "üìã –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≥–¥–µ DNS –¥–ª—è $DOMAIN –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –æ—à–∏–±–∫–æ–π
  fi
else
  log "‚ö†Ô∏è curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
fi

  # –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç-–¥–µ–ø–ª–æ–π–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO
  log "üîç –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç-–¥–µ–ø–ª–æ–π–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO..."
  if [ -f "$ROOT_DIR/scripts/regenerate-seo.sh" ]; then
    # –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (30 —Å–µ–∫—É–Ω–¥)
    sleep 30
    bash "$ROOT_DIR/scripts/regenerate-seo.sh"
  else
    log "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç regenerate-seo.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç regenerate-seo.sh –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cat > "$ROOT_DIR/scripts/regenerate-seo.sh" << 'EOF'
#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function log() {
  echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

function success() {
  echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

function error() {
  echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -f "docker/.env" ]; then
  source docker/.env
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Å–∞–π—Ç–∞
SITE_URL=${NEXT_PUBLIC_BASE_URL:-"https://kvartiry26.ru"}
API_URL=${NEXT_PUBLIC_API_URL:-"https://kvartiry26.ru/api"}

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é SEO-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è $SITE_URL"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
if ! curl -s -f "$SITE_URL" > /dev/null; then
  error "‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É $SITE_URL"
  exit 1
fi

# –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
PAGES=(
  "/"
  "/catalog"
  "/sitemap.xml"
)

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
log "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –∫–≤–∞—Ä—Ç–∏—Ä..."
APARTMENT_IDS=$(curl -s "${API_URL}/api/v1/apartments?page_size=20" | grep -o '"id":[0-9]*' | grep -o '[0-9]*' 2>/dev/null || echo "")

if [ -z "$APARTMENT_IDS" ]; then
  log "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–≤–∞—Ä—Ç–∏—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
else
  success "‚úÖ –ü–æ–ª—É—á–µ–Ω—ã ID –∫–≤–∞—Ä—Ç–∏—Ä"
  for id in $APARTMENT_IDS; do
    PAGES+=("/apartment/$id")
  done
fi

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
for page in "${PAGES[@]}"; do
  log "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: $page"
  response=$(curl -s -o /dev/null -w "%{http_code}" "${SITE_URL}${page}")
  if [ "$response" == "200" ]; then
    success "‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ $page —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
  else
    log "‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ $page –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ $response"
  fi
  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
  sleep 1
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º sitemap
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ sitemap.xml..."
sitemap_content=$(curl -s "${SITE_URL}/sitemap.xml")
apartment_count=$(echo "$sitemap_content" | grep -c "/apartment/")

if [ $apartment_count -gt 0 ]; then
  success "‚úÖ sitemap.xml —Å–æ–¥–µ—Ä–∂–∏—Ç $apartment_count —Å—Ç—Ä–∞–Ω–∏—Ü –∫–≤–∞—Ä—Ç–∏—Ä"
else
  log "‚ö†Ô∏è –í sitemap.xml –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–≤–∞—Ä—Ç–∏—Ä"
fi

# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è sitemap
log "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è sitemap..."
mkdir -p apps/frontend/public
curl -s "${API_URL}/api/v1/apartments?page_size=40" > apps/frontend/public/sitemap-data.json
success "‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è sitemap –æ–±–Ω–æ–≤–ª–µ–Ω—ã"

success "‚úÖ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SEO-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
EOF
    chmod +x "$ROOT_DIR/scripts/regenerate-seo.sh"
    log "‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç regenerate-seo.sh"
    bash "$ROOT_DIR/scripts/regenerate-seo.sh"
  fi
else
  # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º
  if command -v curl &> /dev/null; then
    if curl -s http://localhost:8000/api/v1 > /dev/null; then
      success "‚úÖ –ë—ç–∫–µ–Ω–¥ API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
      log "‚ö†Ô∏è –ë—ç–∫–µ–Ω–¥ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi

    if curl -s http://localhost:3000 > /dev/null; then
      success "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
      log "‚ö†Ô∏è –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
  else
    log "‚ö†Ô∏è curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
  fi
fi

# –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –ª–æ–≥
success "================================================="
success "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —Ä–µ–∂–∏–º–µ: $MODE"
success "================================================="

if [ "$MODE" == "prod" ]; then
  log "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
  log "- –°–∞–π—Ç: https://$DOMAIN"
  log "- API: https://$DOMAIN/api"
else
  log "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
  log "- Frontend: http://localhost:3000"
  log "- API: http://localhost:8000/api/v1"
  log "- API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs"
  log "- MinIO –∫–æ–Ω—Å–æ–ª—å: http://localhost:9001"
fi

log "üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: make down-${MODE}"
success "================================================="