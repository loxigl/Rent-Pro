#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function log() {
  echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

function success() {
  echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

function error() {
  echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

function check_error() {
  if [ $? -ne 0 ]; then
    error "‚ùå $1"
    exit 1
  fi
}

ROOT_DIR=$(pwd)
MODE=${1:-dev}
ENV_FILE="$ROOT_DIR/docker/.env"

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤ —Ä–µ–∂–∏–º–µ: $MODE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker –∏ Docker Compose
if ! command -v docker &> /dev/null; then
  error "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  exit 1
fi

if ! command -v docker-compose &> /dev/null; then
  error "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
if [ ! -f "$ENV_FILE" ]; then
  log "üìÑ –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ .env.sample"
  cp "$ROOT_DIR/docker/.env.sample" "$ENV_FILE"
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env"
  success "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ docker-compose
if [ "$MODE" == "prod" ]; then
  COMPOSE_FILE="$ROOT_DIR/docker/docker-compose.prod.yml"

  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
  source $ENV_FILE

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–∞
  DOMAIN=${DOMAIN:-"example.com"}
  if [[ "$DOMAIN" == "example.com" || -z "$DOMAIN" ]]; then
    error "‚ö†Ô∏è –í .env —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–æ–º–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ DOMAIN –∏ CERTBOT_EMAIL"
    exit 1
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  if [ ! -d "$ROOT_DIR/docker/certbot/conf/live/$DOMAIN" ]; then
    log "üîí SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ $DOMAIN"
    log "üîí –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ CERTBOT_EMAIL
    if [[ -z "$CERTBOT_EMAIL" ]]; then
      error "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω CERTBOT_EMAIL –≤ .env —Ñ–∞–π–ª–µ"
      exit 1
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
    bash "$ROOT_DIR/scripts/setup-ssl.sh" "$DOMAIN" "$CERTBOT_EMAIL"
    check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
  fi

  # –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

  # 1. –ü–æ–¥–Ω–∏–º–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (DB, Redis, MinIO)
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (DB, Redis, MinIO)..."
  docker-compose -f "$COMPOSE_FILE" up -d db redis minio
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"

  # –ñ–¥–µ–º, –ø–æ–∫–∞ –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã
  log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
  sleep 10

  # 2. –ü–æ–¥–Ω–∏–º–∞–µ–º –±—ç–∫–µ–Ω–¥
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫–µ–Ω–¥ –∏ worker..."
  docker-compose -f "$COMPOSE_FILE" up -d backend celery_worker
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥"

  # –ñ–¥–µ–º, –ø–æ–∫–∞ –±—ç–∫–µ–Ω–¥ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
  log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—ç–∫–µ–Ω–¥–∞..."
  sleep 10

  # 3. –ü–æ–¥–Ω–∏–º–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥..."
  docker-compose -f "$COMPOSE_FILE" up -d frontend
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"

  # –ñ–¥–µ–º, –ø–æ–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
  log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
  sleep 10

  # 4. –ó–∞–ø—É—Å–∫–∞–µ–º Nginx –∏ Certbot
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Nginx –∏ Certbot..."
  docker-compose -f "$COMPOSE_FILE" up -d nginx certbot
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Nginx –∏ Certbot"
else
  COMPOSE_FILE="$ROOT_DIR/docker/docker-compose.dev.yml"
  log "üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Ä–µ–∂–∏–º–µ $MODE"
  docker-compose -f "$COMPOSE_FILE" up -d
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
fi

# –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log "üóÉÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
docker-compose -f "$COMPOSE_FILE" exec -T backend alembic -c alembic.ini upgrade head
check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"

# –î–ª—è dev —Ä–µ–∂–∏–º–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
if [ "$MODE" == "dev" ]; then
  log "üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
  APARTMENT_COUNT=$(docker-compose -f "$COMPOSE_FILE" exec -T db psql -U postgres -d avitorentpro -c "SELECT COUNT(*) FROM apartment;" -t 2>/dev/null || echo "0")
  APARTMENT_COUNT=$(echo $APARTMENT_COUNT | tr -d ' ')

  if [[ $APARTMENT_COUNT == "0" || $APARTMENT_COUNT == *"does not exist"* ]]; then
    log "üß™ –ó–∞–ø–æ–ª–Ω—è–µ–º –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
    docker-compose -f "$COMPOSE_FILE" exec -T backend python -m scripts.seed_data
    check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
  else
    success "‚úÖ –í –ë–î —É–∂–µ –µ—Å—Ç—å $APARTMENT_COUNT –∑–∞–ø–∏—Å–µ–π"
  fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

if [ "$MODE" == "prod" ]; then
  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Nginx
  log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Nginx..."
  if command -v curl &> /dev/null; then
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ HTTPS)
    HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$DOMAIN/)
    if [[ "$HTTP_STATUS" == "301" || "$HTTP_STATUS" == "302" ]]; then
      success "‚úÖ HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ($HTTP_STATUS)"
    else
      log "‚ö†Ô∏è HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: $HTTP_STATUS)"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ DNS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ)
    if curl -k -s https://$DOMAIN/ > /dev/null; then
      success "‚úÖ HTTPS –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
      log "‚ö†Ô∏è HTTPS –¥–æ—Å—Ç—É–ø –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É DNS –¥–ª—è –¥–æ–º–µ–Ω–∞ $DOMAIN"
    fi
  else
    log "‚ö†Ô∏è curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
  fi
else
  # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º
  if command -v curl &> /dev/null; then
    if curl -s http://localhost:8000/api/v1 > /dev/null; then
      success "‚úÖ –ë—ç–∫–µ–Ω–¥ API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
      log "‚ö†Ô∏è –ë—ç–∫–µ–Ω–¥ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi

    if curl -s http://localhost:3000 > /dev/null; then
      success "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
      log "‚ö†Ô∏è –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
  else
    log "‚ö†Ô∏è curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
  fi
fi

# –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –ª–æ–≥
success "================================================="
success "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —Ä–µ–∂–∏–º–µ: $MODE"
success "================================================="

if [ "$MODE" == "prod" ]; then
  log "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
  log "- –°–∞–π—Ç: https://$DOMAIN"
  log "- API: https://$DOMAIN/api"
else
  log "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
  log "- Frontend: http://localhost:3000"
  log "- API: http://localhost:8000/api/v1"
  log "- API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs"
  log "- MinIO –∫–æ–Ω—Å–æ–ª—å: http://localhost:9001"
fi

log "üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: make down-${MODE}"
success "================================================="