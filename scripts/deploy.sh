#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function log() {
  echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

function check_error() {
  if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
  fi
}

ROOT_DIR=$(pwd)
MODE=${1:-dev}
ENV_FILE="$ROOT_DIR/docker/.env"

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤ —Ä–µ–∂–∏–º–µ: $MODE"

if ! command -v docker &> /dev/null; then
  echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
  exit 1
fi

if ! command -v docker-compose &> /dev/null; then
  echo -e "${RED}‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
  exit 1
fi

if [ ! -f "$ENV_FILE" ]; then
  log "üìÑ –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ .env.sample"
  cp "$ROOT_DIR/docker/.env.sample" "$ENV_FILE"
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env"
  log "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
fi

if [ "$MODE" == "prod" ]; then
  COMPOSE_FILE="$ROOT_DIR/docker/docker-compose.prod.yml"

  DOMAIN=$(grep DOMAIN "$ENV_FILE" | cut -d '=' -f2 | tr -d '\r')
  EMAIL=$(grep CERTBOT_EMAIL "$ENV_FILE" | cut -d '=' -f2 | tr -d '\r')

  if [[ "$DOMAIN" == "rent.example.ru" || -z "$DOMAIN" ]]; then
    log "‚ö†Ô∏è –í .env —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–æ–º–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ DOMAIN –∏ CERTBOT_EMAIL"
    exit 1
  fi
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  if [ ! -f "$ROOT_DIR/docker/certbot/live/$DOMAIN/fullchain.pem" ]; then
    echo -e "${RED}‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–æ–º–µ–Ω–∞ $DOMAIN${NC}"
    echo -e "${RED}‚ö° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º!${NC}"
    exit 1
  fi
  # –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  log "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
  docker-compose -f "$COMPOSE_FILE" up -d
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
else
  COMPOSE_FILE="$ROOT_DIR/docker/docker-compose.dev.yml"
  log "üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Ä–µ–∂–∏–º–µ $MODE"
  docker-compose -f "$COMPOSE_FILE" up -d
  check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
fi

# –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log "üóÉÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
docker-compose -f "$COMPOSE_FILE" exec -T backend alembic -c alembic.ini upgrade head
check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"

# –î–ª—è dev —Ä–µ–∂–∏–º–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
if [ "$MODE" == "dev" ]; then
  log "üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
  APARTMENT_COUNT=$(docker-compose -f "$COMPOSE_FILE" exec -T db psql -U postgres -d avitorentpro -c "SELECT COUNT(*) FROM apartment;" -t 2>/dev/null || echo "0")
  APARTMENT_COUNT=$(echo $APARTMENT_COUNT | tr -d ' ')

  if [[ $APARTMENT_COUNT == "0" || $APARTMENT_COUNT == *"does not exist"* ]]; then
    log "üß™ –ó–∞–ø–æ–ª–Ω—è–µ–º –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
    docker-compose -f "$COMPOSE_FILE" exec -T backend python -m scripts.seed_data
    check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
  else
    log "‚úÖ –í –ë–î —É–∂–µ –µ—Å—Ç—å $APARTMENT_COUNT –∑–∞–ø–∏—Å–µ–π"
  fi
fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO
log "üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO"
MINIO_BUCKET=$(grep MINIO_BUCKET "$ENV_FILE" | cut -d '=' -f2 | tr -d '\r')
docker-compose -f "$COMPOSE_FILE" exec -T minio mkdir -p /data/$MINIO_BUCKET 2>/dev/null || echo "already exists"

# –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –ª–æ–≥
echo -e "${GREEN}=================================================${NC}"
echo -e "${GREEN}‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —Ä–µ–∂–∏–º–µ: $MODE${NC}"
echo -e "${GREEN}=================================================${NC}"

if [ "$MODE" == "prod" ]; then
  echo -e "${YELLOW}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:${NC}"
  echo -e "${YELLOW}- –°–∞–π—Ç: https://$DOMAIN${NC}"
  echo -e "${YELLOW}- API: https://$DOMAIN/api${NC}"
else
  echo -e "${YELLOW}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:${NC}"
  echo -e "${YELLOW}- Frontend: http://localhost:3000${NC}"
  echo -e "${YELLOW}- API: http://localhost:8000/api/v1${NC}"
  echo -e "${YELLOW}- API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs${NC}"
  echo -e "${YELLOW}- MinIO –∫–æ–Ω—Å–æ–ª—å: http://localhost:9001${NC}"
fi

echo -e "${YELLOW}üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: make stop-${MODE}${NC}"
echo -e "${GREEN}=================================================${NC}"
