version: '3.8'

services:
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - avitorentpro

  minio:
    image: minio/minio:latest
    restart: always
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - avitorentpro

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - avitorentpro

  backend:
    build:
      context: ../apps/backend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - db
      - minio
      - redis
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_BUCKET=${MINIO_BUCKET}
      - MINIO_USE_SSL=False
      - PHOTOS_BASE_URL=${PHOTOS_BASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DEBUG=False
      - PYTHONPATH=/app

    networks:
      - avitorentpro

  celery_worker:
    build:
      context: ../apps/backend
      dockerfile: Dockerfile
    restart: always
    command: celery -A src.celery_worker worker --loglevel=info
    depends_on:
      - redis
      - backend
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_BUCKET=${MINIO_BUCKET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DEBUG=False
    networks:
      - avitorentpro

  frontend:
    build:
      context: ../apps/frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
        - NEXT_PUBLIC_MINIO_HOST=${NEXT_PUBLIC_MINIO_HOST}
    restart: always
    depends_on:
      - backend
    networks:
      - avitorentpro

  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - minio
    networks:
      - avitorentpro

  # Certbot для получения SSL-сертификатов
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - avitorentpro

volumes:
  pgdata:
  minio_data:
  redis_data:

networks:
  avitorentpro:
    driver: bridge